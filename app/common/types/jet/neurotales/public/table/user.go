//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	TokenNumber      postgres.ColumnInteger
	UseTrial         postgres.ColumnBool
	InviteCode       postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz
	IsPayedTale      postgres.ColumnBool
	FirstName        postgres.ColumnString
	LastName         postgres.ColumnString
	TelegramUsername postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		TokenNumberColumn      = postgres.IntegerColumn("token_number")
		UseTrialColumn         = postgres.BoolColumn("use_trial")
		InviteCodeColumn       = postgres.StringColumn("invite_code")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		IsPayedTaleColumn      = postgres.BoolColumn("is_payed_tale")
		FirstNameColumn        = postgres.StringColumn("first_name")
		LastNameColumn         = postgres.StringColumn("last_name")
		TelegramUsernameColumn = postgres.StringColumn("telegram_username")
		allColumns             = postgres.ColumnList{IDColumn, TokenNumberColumn, UseTrialColumn, InviteCodeColumn, CreatedAtColumn, IsPayedTaleColumn, FirstNameColumn, LastNameColumn, TelegramUsernameColumn}
		mutableColumns         = postgres.ColumnList{TokenNumberColumn, UseTrialColumn, InviteCodeColumn, CreatedAtColumn, IsPayedTaleColumn, FirstNameColumn, LastNameColumn, TelegramUsernameColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		TokenNumber:      TokenNumberColumn,
		UseTrial:         UseTrialColumn,
		InviteCode:       InviteCodeColumn,
		CreatedAt:        CreatedAtColumn,
		IsPayedTale:      IsPayedTaleColumn,
		FirstName:        FirstNameColumn,
		LastName:         LastNameColumn,
		TelegramUsername: TelegramUsernameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
